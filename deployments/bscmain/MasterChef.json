{
  "address": "0x10e5249C614140D5e8655d79b2f9D645f4ea003D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Mintable",
          "name": "_kiki",
          "type": "address"
        },
        {
          "internalType": "contract SyrupBar",
          "name": "_syrup",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_kikiPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BONUS_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "enterStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kiki",
      "outputs": [
        {
          "internalType": "contract IERC20Mintable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kikiPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "leaveStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingKiKi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accKiKiPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syrup",
      "outputs": [
        {
          "internalType": "contract SyrupBar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "multiplierNumber",
          "type": "uint256"
        }
      ],
      "name": "updateMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9045209242bf10e6a216bd2759b4bfa23c2e528d180bd2f52164dc8bfc87e5a6",
  "receipt": {
    "to": null,
    "from": "0x49554923b9361e158Fb267B436f843a4f537D53a",
    "contractAddress": "0xCAddA1242F8136281c698bA9aAD5076163c10884",
    "transactionIndex": 109,
    "gasUsed": "1736540",
    "logsBloom": "0x
    "blockHash": "0x26627e1f1ed2e27bf62586b7ac38123edbe0665c63cad4fac32e6155593e4e6f",
    "transactionHash": "0x9045209242bf10e6a216bd2759b4bfa23c2e528d180bd2f52164dc8bfc87e5a6",
    "logs": [
      {
        "transactionIndex": 109,
        "blockNumber": 18680907,
        "transactionHash": "0x9045209242bf10e6a216bd2759b4bfa23c2e528d180bd2f52164dc8bfc87e5a6",
        "address": "0xCAddA1242F8136281c698bA9aAD5076163c10884",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049554923b9361e158fb267b436f843a4f537d53a"
        ],
        "data": "0x",
        "logIndex": 447,
        "blockHash": "0x26627e1f1ed2e27bf62586b7ac38123edbe0665c63cad4fac32e6155593e4e6f"
      }
    ],
    "blockNumber": 18680907,
    "cumulativeGasUsed": "18412886",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x456469b4FCd1993A734fe7caE3bE039aB946BA9A",
    "0x23Ef932A264B8262f866A5505ACde8B588DF73A6",
    "10000000000000000000",
    0
  ],
  "numDeployments": 1,
  "solcInputHash": "07b2c9d278da161b466ace643d4a2603",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"_kiki\",\"type\":\"address\"},{\"internalType\":\"contract SyrupBar\",\"name\":\"_syrup\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_kikiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kiki\",\"outputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kikiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingKiKi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accKiKiPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syrup\",\"outputs\":[{\"internalType\":\"contract SyrupBar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterChef.sol\":\"MasterChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/MasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IERC20Mintable.sol\\\";\\r\\nimport \\\"./SyrupBar.sol\\\";\\r\\n\\r\\n// MasterChef is the master of kiki. He can make kiki and he is a fair guy.\\r\\n//\\r\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\r\\n// will be transferred to a governance smart contract once KIKI is sufficiently\\r\\n// distributed and the community can show to govern itself.\\r\\n//\\r\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\r\\ncontract MasterChef is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        //\\r\\n        // We do some fancy math here. Basically, any point in time, the amount of KIKIs\\r\\n        // entitled to a user but is pending to be distributed is:\\r\\n        //\\r\\n        //   pending reward = (user.amount * pool.accKiKiPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n        //   1. The pool's `accKiKiPerShare` (and `lastRewardBlock`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User's `amount` gets updated.\\r\\n        //   4. User's `rewardDebt` gets updated.\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken;           // Address of LP token contract.\\r\\n        uint256 allocPoint;       // How many allocation points assigned to this pool. KIKIs to distribute per block.\\r\\n        uint256 lastRewardBlock;  // Last block number that KIKIs distribution occurs.\\r\\n        uint256 accKiKiPerShare; // Accumulated KIKIs per share, times 1e12. See below.\\r\\n    }\\r\\n\\r\\n    // The KIKI TOKEN!\\r\\n    IERC20Mintable public kiki;\\r\\n    // The SYRUP TOKEN!\\r\\n    SyrupBar public syrup;\\r\\n    // KIKI tokens created per block.\\r\\n    uint256 public kikiPerBlock;\\r\\n    // Bonus muliplier for early kiki makers.\\r\\n    uint256 public BONUS_MULTIPLIER = 1;\\r\\n\\r\\n    // Info of each pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint = 0;\\r\\n    // The block number when KIKI mining starts.\\r\\n    uint256 public startBlock;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        IERC20Mintable _kiki,\\r\\n        SyrupBar _syrup,\\r\\n        uint256 _kikiPerBlock,\\r\\n        uint256 _startBlock\\r\\n    ) public {\\r\\n        kiki = _kiki;\\r\\n        syrup = _syrup;\\r\\n        kikiPerBlock = _kikiPerBlock;\\r\\n        startBlock = _startBlock;\\r\\n\\r\\n        // staking pool\\r\\n        poolInfo.push(PoolInfo({\\r\\n            lpToken: IERC20(address(_kiki)),\\r\\n            allocPoint: 1000,\\r\\n            lastRewardBlock: startBlock,\\r\\n            accKiKiPerShare: 0\\r\\n        }));\\r\\n\\r\\n        totalAllocPoint = 1000;\\r\\n\\r\\n    }\\r\\n\\r\\n    function updateMultiplier(uint256 multiplierNumber) public onlyOwner {\\r\\n        BONUS_MULTIPLIER = multiplierNumber;\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\r\\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\r\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n        poolInfo.push(PoolInfo({\\r\\n            lpToken: _lpToken,\\r\\n            allocPoint: _allocPoint,\\r\\n            lastRewardBlock: lastRewardBlock,\\r\\n            accKiKiPerShare: 0\\r\\n        }));\\r\\n        updateStakingPool();\\r\\n    }\\r\\n\\r\\n    // Update the given pool's KIKI allocation point. Can only be called by the owner.\\r\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n        if (prevAllocPoint != _allocPoint) {\\r\\n            updateStakingPool();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateStakingPool() internal {\\r\\n        uint256 length = poolInfo.length;\\r\\n        uint256 points = 0;\\r\\n        for (uint256 pid = 1; pid < length; ++pid) {\\r\\n            points = points.add(poolInfo[pid].allocPoint);\\r\\n        }\\r\\n        if (points != 0) {\\r\\n            points = points.div(3);\\r\\n            totalAllocPoint = totalAllocPoint.sub(poolInfo[0].allocPoint).add(points);\\r\\n            poolInfo[0].allocPoint = points;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Return reward multiplier over the given _from to _to block.\\r\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\r\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\r\\n    }\\r\\n\\r\\n    // View function to see pending KIKIs on frontend.\\r\\n    function pendingKiKi(uint256 _pid, address _user) external view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accKiKiPerShare = pool.accKiKiPerShare;\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\r\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n            uint256 kikiReward = multiplier.mul(kikiPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\r\\n            accKiKiPerShare = accKiKiPerShare.add(kikiReward.mul(1e12).div(lpSupply));\\r\\n        }\\r\\n        return user.amount.mul(accKiKiPerShare).div(1e12).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    // Update reward variables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n        if (lpSupply == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n        uint256 kikiReward = multiplier.mul(kikiPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\r\\n        kiki.mint(address(syrup), kikiReward);\\r\\n        pool.accKiKiPerShare = pool.accKiKiPerShare.add(kikiReward.mul(1e12).div(lpSupply));\\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    // Deposit LP tokens to MasterChef for KIKI allocation.\\r\\n    function deposit(uint256 _pid, uint256 _amount) public {\\r\\n\\r\\n        require (_pid != 0, 'deposit KIKI by staking');\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        updatePool(_pid);\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending = user.amount.mul(pool.accKiKiPerShare).div(1e12).sub(user.rewardDebt);\\r\\n            if(pending > 0) {\\r\\n                safeKiKiTransfer(msg.sender, pending);\\r\\n            }\\r\\n        }\\r\\n        if (_amount > 0) {\\r\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n            user.amount = user.amount.add(_amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accKiKiPerShare).div(1e12);\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw LP tokens from MasterChef.\\r\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\r\\n\\r\\n        require (_pid != 0, 'withdraw KIKI by unstaking');\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\r\\n        updatePool(_pid);\\r\\n        uint256 pending = user.amount.mul(pool.accKiKiPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        if(pending > 0) {\\r\\n            safeKiKiTransfer(msg.sender, pending);\\r\\n        }\\r\\n        if(_amount > 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accKiKiPerShare).div(1e12);\\r\\n        emit Withdraw(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Stake KIKI tokens to MasterChef\\r\\n    function enterStaking(uint256 _amount) public {\\r\\n        PoolInfo storage pool = poolInfo[0];\\r\\n        UserInfo storage user = userInfo[0][msg.sender];\\r\\n        updatePool(0);\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending = user.amount.mul(pool.accKiKiPerShare).div(1e12).sub(user.rewardDebt);\\r\\n            if(pending > 0) {\\r\\n                safeKiKiTransfer(msg.sender, pending);\\r\\n            }\\r\\n        }\\r\\n        if(_amount > 0) {\\r\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n            user.amount = user.amount.add(_amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accKiKiPerShare).div(1e12);\\r\\n\\r\\n        syrup.mint(msg.sender, _amount);\\r\\n        emit Deposit(msg.sender, 0, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw KIKI tokens from STAKING.\\r\\n    function leaveStaking(uint256 _amount) public {\\r\\n        PoolInfo storage pool = poolInfo[0];\\r\\n        UserInfo storage user = userInfo[0][msg.sender];\\r\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\r\\n        updatePool(0);\\r\\n        uint256 pending = user.amount.mul(pool.accKiKiPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        if(pending > 0) {\\r\\n            safeKiKiTransfer(msg.sender, pending);\\r\\n        }\\r\\n        if(_amount > 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accKiKiPerShare).div(1e12);\\r\\n\\r\\n        syrup.burn(msg.sender, _amount);\\r\\n        emit Withdraw(msg.sender, 0, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n    }\\r\\n\\r\\n    // Safe kiki transfer function, just in case if rounding error causes pool to not have enough KIKIs.\\r\\n    function safeKiKiTransfer(address _to, uint256 _amount) internal {\\r\\n        syrup.safeKiKiTransfer(_to, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x47c2a1d1084d26a0e8ea35e608edaee1ee227b560cf2b2495aef8b45d189020f\",\"license\":\"MIT\"},\"contracts/SyrupBar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IERC20Mintable.sol\\\";\\r\\n\\r\\n// SyrupBar with Governance.\\r\\ncontract SyrupBar is ERC20('SyrupBar Token', 'SYRUP'), Ownable {\\r\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\r\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\r\\n        _mint(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function burn(address _from ,uint256 _amount) public onlyOwner {\\r\\n        _burn(_from, _amount);\\r\\n    }\\r\\n\\r\\n    // The KIKI TOKEN!\\r\\n    IERC20Mintable public kiki;\\r\\n\\r\\n    constructor(\\r\\n        IERC20Mintable _kiki\\r\\n    ) public {\\r\\n        kiki = _kiki;\\r\\n    }\\r\\n\\r\\n    // Safe kiki transfer function, just in case if rounding error causes pool to not have enough KIKIs.\\r\\n    function safeKiKiTransfer(address _to, uint256 _amount) public onlyOwner {\\r\\n        uint256 kikiBal = kiki.balanceOf(address(this));\\r\\n        if (_amount > kikiBal) {\\r\\n            kiki.transfer(_to, kikiBal);\\r\\n        } else {\\r\\n            kiki.transfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x42ddfb7d4336b4013c5181d470921e15240b7fad7008ba490d10557548980607\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Mintable is IERC20 {\\r\\n    function mint(address to, uint256 amount) external returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xb63d139d543528d71d270c879a8e303f0cd0fd31b95365bab333b4140ba8e564\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600455600060075534801561001a57600080fd5b50604051611cbc380380611cbc8339818101604052608081101561003d57600080fd5b5080516020820151604083015160609093015191929091600061005e6101c8565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b03199081166001600160a01b039687169081178355600280548316968816969096179095556003939093556008829055604080516080810182529485526103e86020860181815291860193845260006060870181815260058054958601815590915295517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db06004909402938401805490961697169690961790935591517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db1830155517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db282015590517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db3909101556007556101cc565b3390565b611ae1806101db6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063630b5ba1116100c35780638da5cb5b1161007c5780638da5cb5b146103595780638dbb1e3a1461036157806393f1a40b14610384578063b173ade4146103c9578063e2bbb158146103d1578063f2fde38b146103f457610158565b8063630b5ba1146102e257806364482f79146102ea578063715018a6146103155780637710d9001461031d57806386a952c4146103495780638aa285501461035157610158565b8063441a3e7011610115578063441a3e701461023c57806348cd4cb11461025f57806351eb05a6146102675780635312ea8e146102845780635d4cbb3c146102a15780635ffe6146146102c557610158565b8063081e3eda1461015d5780631058d281146101775780631526fe271461019657806317caf6f1146101e35780631eaaa045146101eb57806341441d3b1461021f575b600080fd5b61016561041a565b60408051918252519081900360200190f35b6101946004803603602081101561018d57600080fd5b5035610420565b005b6101b3600480360360208110156101ac57600080fd5b5035610604565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b610165610645565b6101946004803603606081101561020157600080fd5b508035906001600160a01b036020820135169060400135151561064b565b6101946004803603602081101561023557600080fd5b50356107db565b6101946004803603604081101561025257600080fd5b508035906020013561096f565b610165610b14565b6101946004803603602081101561027d57600080fd5b5035610b1a565b6101946004803603602081101561029a57600080fd5b5035610cd0565b6102a9610d6b565b604080516001600160a01b039092168252519081900360200190f35b610194600480360360208110156102db57600080fd5b5035610d7a565b610194610de1565b6101946004803603606081101561030057600080fd5b50803590602081013590604001351515610e04565b610194610f0c565b6101656004803603604081101561033357600080fd5b50803590602001356001600160a01b0316610fb8565b6102a961111c565b61016561112b565b6102a9611131565b6101656004803603604081101561037757600080fd5b5080359060200135611140565b6103b06004803603604081101561039a57600080fd5b50803590602001356001600160a01b031661115b565b6040805192835260208301919091528051918290030190f35b61016561117f565b610194600480360360408110156103e757600080fd5b5080359060200135611185565b6101946004803603602081101561040a57600080fd5b50356001600160a01b03166112e9565b60055490565b6000600560008154811061043057fe5b600091825260208083203384527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f890915260409092208054600490920290920192508311156104bb576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b6104c56000610b1a565b60006104ff82600101546104f964e8d4a510006104f3876003015487600001546113eb90919063ffffffff16565b90611444565b906114ab565b90508015610511576105113382611508565b831561053b57815461052390856114ab565b8255825461053b906001600160a01b03163386611579565b600383015482546105569164e8d4a51000916104f3916113eb565b600183015560025460408051632770a7eb60e21b81523360048201526024810187905290516001600160a01b0390921691639dc29fac9160448082019260009290919082900301818387803b1580156105ae57600080fd5b505af11580156105c2573d6000803e3d6000fd5b5050604080518781529051600093503392507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a350505050565b6005818154811061061157fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b60075481565b6106536115d0565b6001600160a01b0316610664611131565b6001600160a01b0316146106ad576040805162461bcd60e51b81526020600482018190526024820152600080516020611a62833981519152604482015290519081900360640190fd5b80156106bb576106bb610de1565b600060085443116106ce576008546106d0565b435b6007549091506106e090856115d4565b600755604080516080810182526001600160a01b0385811682526020820187815292820184815260006060840181815260058054600181018255925293517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0600490920291820180546001600160a01b031916919094161790925592517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db182015591517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db2830155517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db3909101556107d561162e565b50505050565b600060056000815481106107eb57fe5b600091825260208083203384527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f89091526040832060049092020192509061083290610b1a565b80541561087b57600061086782600101546104f964e8d4a510006104f3876003015487600001546113eb90919063ffffffff16565b90508015610879576108793382611508565b505b82156108a7578154610898906001600160a01b03163330866116d0565b80546108a490846115d4565b81555b600382015481546108c29164e8d4a51000916104f3916113eb565b6001820155600254604080516340c10f1960e01b81523360048201526024810186905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b15801561091a57600080fd5b505af115801561092e573d6000803e3d6000fd5b5050604080518681529051600093503392507f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505050565b816109c1576040805162461bcd60e51b815260206004820152601a60248201527f7769746864726177204b494b4920627920756e7374616b696e67000000000000604482015290519081900360640190fd5b6000600583815481106109d057fe5b600091825260208083208684526006825260408085203386529092529220805460049092029092019250831115610a43576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b610a4c84610b1a565b6000610a7a82600101546104f964e8d4a510006104f3876003015487600001546113eb90919063ffffffff16565b90508015610a8c57610a8c3382611508565b8315610ab6578154610a9e90856114ab565b82558254610ab6906001600160a01b03163386611579565b60038301548254610ad19164e8d4a51000916104f3916113eb565b6001830155604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050505050565b60085481565b600060058281548110610b2957fe5b9060005260206000209060040201905080600201544311610b4a5750610ccd565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610b9457600080fd5b505afa158015610ba8573d6000803e3d6000fd5b505050506040513d6020811015610bbe57600080fd5b5051905080610bd4575043600290910155610ccd565b6000610be4836002015443611140565b90506000610c116007546104f38660010154610c0b600354876113eb90919063ffffffff16565b906113eb565b600154600254604080516340c10f1960e01b81526001600160a01b0392831660048201526024810185905290519394509116916340c10f19916044808201926020929091908290030181600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d6020811015610c9657600080fd5b50610cba9050610caf846104f38464e8d4a510006113eb565b6003860154906115d4565b6003850155505043600290920191909155505b50565b600060058281548110610cdf57fe5b60009182526020808320858452600682526040808520338087529352909320805460049093029093018054909450610d24926001600160a01b03919091169190611579565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a360008082556001909101555050565b6001546001600160a01b031681565b610d826115d0565b6001600160a01b0316610d93611131565b6001600160a01b031614610ddc576040805162461bcd60e51b81526020600482018190526024820152600080516020611a62833981519152604482015290519081900360640190fd5b600455565b60055460005b81811015610e0057610df881610b1a565b600101610de7565b5050565b610e0c6115d0565b6001600160a01b0316610e1d611131565b6001600160a01b031614610e66576040805162461bcd60e51b81526020600482018190526024820152600080516020611a62833981519152604482015290519081900360640190fd5b8015610e7457610e74610de1565b610eb182610eab60058681548110610e8857fe5b9060005260206000209060040201600101546007546114ab90919063ffffffff16565b906115d4565b600781905550600060058481548110610ec657fe5b90600052602060002090600402016001015490508260058581548110610ee857fe5b9060005260206000209060040201600101819055508281146107d5576107d561162e565b610f146115d0565b6001600160a01b0316610f25611131565b6001600160a01b031614610f6e576040805162461bcd60e51b81526020600482018190526024820152600080516020611a62833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60008060058481548110610fc857fe5b600091825260208083208784526006825260408085206001600160a01b03898116875290845281862060049586029093016003810154815484516370a0823160e01b81523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b15801561104657600080fd5b505afa15801561105a573d6000803e3d6000fd5b505050506040513d602081101561107057600080fd5b505160028501549091504311801561108757508015155b156110e757600061109c856002015443611140565b905060006110c36007546104f38860010154610c0b600354876113eb90919063ffffffff16565b90506110e26110db846104f38464e8d4a510006113eb565b85906115d4565b935050505b61110f83600101546104f964e8d4a510006104f38688600001546113eb90919063ffffffff16565b9450505050505b92915050565b6002546001600160a01b031681565b60045481565b6000546001600160a01b031690565b60045460009061115490610c0b84866114ab565b9392505050565b60066020908152600092835260408084209091529082529020805460019091015482565b60035481565b816111d7576040805162461bcd60e51b815260206004820152601760248201527f6465706f736974204b494b49206279207374616b696e67000000000000000000604482015290519081900360640190fd5b6000600583815481106111e657fe5b6000918252602080832086845260068252604080852033865290925292206004909102909101915061121784610b1a565b80541561126057600061124c82600101546104f964e8d4a510006104f3876003015487600001546113eb90919063ffffffff16565b9050801561125e5761125e3382611508565b505b821561128c57815461127d906001600160a01b03163330866116d0565b805461128990846115d4565b81555b600382015481546112a79164e8d4a51000916104f3916113eb565b6001820155604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350505050565b6112f16115d0565b6001600160a01b0316611302611131565b6001600160a01b03161461134b576040805162461bcd60e51b81526020600482018190526024820152600080516020611a62833981519152604482015290519081900360640190fd5b6001600160a01b0381166113905760405162461bcd60e51b81526004018080602001828103825260268152602001806119f56026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000826113fa57506000611116565b8282028284828161140757fe5b04146111545760405162461bcd60e51b8152600401808060200182810382526021815260200180611a416021913960400191505060405180910390fd5b600080821161149a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816114a357fe5b049392505050565b600082821115611502576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60025460408051631777090b60e21b81526001600160a01b0385811660048301526024820185905291519190921691635ddc242c91604480830192600092919082900301818387803b15801561155d57600080fd5b505af1158015611571573d6000803e3d6000fd5b505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526115cb908490611726565b505050565b3390565b600082820183811015611154576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600554600060015b828110156116795761166f6005828154811061164e57fe5b906000526020600020906004020160010154836115d490919063ffffffff16565b9150600101611636565b508015610e005761168b816003611444565b90506116a281610eab6005600081548110610e8857fe5b6007819055508060056000815481106116b757fe5b9060005260206000209060040201600101819055505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526107d59085905b606061177b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117d79092919063ffffffff16565b8051909150156115cb5780806020019051602081101561179a57600080fd5b50516115cb5760405162461bcd60e51b815260040180806020018281038252602a815260200180611a82602a913960400191505060405180910390fd5b60606117e684846000856117ee565b949350505050565b60608247101561182f5760405162461bcd60e51b8152600401808060200182810382526026815260200180611a1b6026913960400191505060405180910390fd5b6118388561194a565b611889576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106118c85780518252601f1990920191602091820191016118a9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461192a576040519150601f19603f3d011682016040523d82523d6000602084013e61192f565b606091505b509150915061193f828286611950565b979650505050505050565b3b151590565b6060831561195f575081611154565b82511561196f5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156119b95781810151838201526020016119a1565b50505050905090810190601f1680156119e65780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220bb556de554caf7d79d09f5d36d832c3a38339f4c198bed8e514522c0c4ddd8ee64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063630b5ba1116100c35780638da5cb5b1161007c5780638da5cb5b146103595780638dbb1e3a1461036157806393f1a40b14610384578063b173ade4146103c9578063e2bbb158146103d1578063f2fde38b146103f457610158565b8063630b5ba1146102e257806364482f79146102ea578063715018a6146103155780637710d9001461031d57806386a952c4146103495780638aa285501461035157610158565b8063441a3e7011610115578063441a3e701461023c57806348cd4cb11461025f57806351eb05a6146102675780635312ea8e146102845780635d4cbb3c146102a15780635ffe6146146102c557610158565b8063081e3eda1461015d5780631058d281146101775780631526fe271461019657806317caf6f1146101e35780631eaaa045146101eb57806341441d3b1461021f575b600080fd5b61016561041a565b60408051918252519081900360200190f35b6101946004803603602081101561018d57600080fd5b5035610420565b005b6101b3600480360360208110156101ac57600080fd5b5035610604565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b610165610645565b6101946004803603606081101561020157600080fd5b508035906001600160a01b036020820135169060400135151561064b565b6101946004803603602081101561023557600080fd5b50356107db565b6101946004803603604081101561025257600080fd5b508035906020013561096f565b610165610b14565b6101946004803603602081101561027d57600080fd5b5035610b1a565b6101946004803603602081101561029a57600080fd5b5035610cd0565b6102a9610d6b565b604080516001600160a01b039092168252519081900360200190f35b610194600480360360208110156102db57600080fd5b5035610d7a565b610194610de1565b6101946004803603606081101561030057600080fd5b50803590602081013590604001351515610e04565b610194610f0c565b6101656004803603604081101561033357600080fd5b50803590602001356001600160a01b0316610fb8565b6102a961111c565b61016561112b565b6102a9611131565b6101656004803603604081101561037757600080fd5b5080359060200135611140565b6103b06004803603604081101561039a57600080fd5b50803590602001356001600160a01b031661115b565b6040805192835260208301919091528051918290030190f35b61016561117f565b610194600480360360408110156103e757600080fd5b5080359060200135611185565b6101946004803603602081101561040a57600080fd5b50356001600160a01b03166112e9565b60055490565b6000600560008154811061043057fe5b600091825260208083203384527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f890915260409092208054600490920290920192508311156104bb576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b6104c56000610b1a565b60006104ff82600101546104f964e8d4a510006104f3876003015487600001546113eb90919063ffffffff16565b90611444565b906114ab565b90508015610511576105113382611508565b831561053b57815461052390856114ab565b8255825461053b906001600160a01b03163386611579565b600383015482546105569164e8d4a51000916104f3916113eb565b600183015560025460408051632770a7eb60e21b81523360048201526024810187905290516001600160a01b0390921691639dc29fac9160448082019260009290919082900301818387803b1580156105ae57600080fd5b505af11580156105c2573d6000803e3d6000fd5b5050604080518781529051600093503392507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a350505050565b6005818154811061061157fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b60075481565b6106536115d0565b6001600160a01b0316610664611131565b6001600160a01b0316146106ad576040805162461bcd60e51b81526020600482018190526024820152600080516020611a62833981519152604482015290519081900360640190fd5b80156106bb576106bb610de1565b600060085443116106ce576008546106d0565b435b6007549091506106e090856115d4565b600755604080516080810182526001600160a01b0385811682526020820187815292820184815260006060840181815260058054600181018255925293517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0600490920291820180546001600160a01b031916919094161790925592517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db182015591517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db2830155517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db3909101556107d561162e565b50505050565b600060056000815481106107eb57fe5b600091825260208083203384527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f89091526040832060049092020192509061083290610b1a565b80541561087b57600061086782600101546104f964e8d4a510006104f3876003015487600001546113eb90919063ffffffff16565b90508015610879576108793382611508565b505b82156108a7578154610898906001600160a01b03163330866116d0565b80546108a490846115d4565b81555b600382015481546108c29164e8d4a51000916104f3916113eb565b6001820155600254604080516340c10f1960e01b81523360048201526024810186905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b15801561091a57600080fd5b505af115801561092e573d6000803e3d6000fd5b5050604080518681529051600093503392507f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505050565b816109c1576040805162461bcd60e51b815260206004820152601a60248201527f7769746864726177204b494b4920627920756e7374616b696e67000000000000604482015290519081900360640190fd5b6000600583815481106109d057fe5b600091825260208083208684526006825260408085203386529092529220805460049092029092019250831115610a43576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b610a4c84610b1a565b6000610a7a82600101546104f964e8d4a510006104f3876003015487600001546113eb90919063ffffffff16565b90508015610a8c57610a8c3382611508565b8315610ab6578154610a9e90856114ab565b82558254610ab6906001600160a01b03163386611579565b60038301548254610ad19164e8d4a51000916104f3916113eb565b6001830155604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050505050565b60085481565b600060058281548110610b2957fe5b9060005260206000209060040201905080600201544311610b4a5750610ccd565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610b9457600080fd5b505afa158015610ba8573d6000803e3d6000fd5b505050506040513d6020811015610bbe57600080fd5b5051905080610bd4575043600290910155610ccd565b6000610be4836002015443611140565b90506000610c116007546104f38660010154610c0b600354876113eb90919063ffffffff16565b906113eb565b600154600254604080516340c10f1960e01b81526001600160a01b0392831660048201526024810185905290519394509116916340c10f19916044808201926020929091908290030181600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d6020811015610c9657600080fd5b50610cba9050610caf846104f38464e8d4a510006113eb565b6003860154906115d4565b6003850155505043600290920191909155505b50565b600060058281548110610cdf57fe5b60009182526020808320858452600682526040808520338087529352909320805460049093029093018054909450610d24926001600160a01b03919091169190611579565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a360008082556001909101555050565b6001546001600160a01b031681565b610d826115d0565b6001600160a01b0316610d93611131565b6001600160a01b031614610ddc576040805162461bcd60e51b81526020600482018190526024820152600080516020611a62833981519152604482015290519081900360640190fd5b600455565b60055460005b81811015610e0057610df881610b1a565b600101610de7565b5050565b610e0c6115d0565b6001600160a01b0316610e1d611131565b6001600160a01b031614610e66576040805162461bcd60e51b81526020600482018190526024820152600080516020611a62833981519152604482015290519081900360640190fd5b8015610e7457610e74610de1565b610eb182610eab60058681548110610e8857fe5b9060005260206000209060040201600101546007546114ab90919063ffffffff16565b906115d4565b600781905550600060058481548110610ec657fe5b90600052602060002090600402016001015490508260058581548110610ee857fe5b9060005260206000209060040201600101819055508281146107d5576107d561162e565b610f146115d0565b6001600160a01b0316610f25611131565b6001600160a01b031614610f6e576040805162461bcd60e51b81526020600482018190526024820152600080516020611a62833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60008060058481548110610fc857fe5b600091825260208083208784526006825260408085206001600160a01b03898116875290845281862060049586029093016003810154815484516370a0823160e01b81523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b15801561104657600080fd5b505afa15801561105a573d6000803e3d6000fd5b505050506040513d602081101561107057600080fd5b505160028501549091504311801561108757508015155b156110e757600061109c856002015443611140565b905060006110c36007546104f38860010154610c0b600354876113eb90919063ffffffff16565b90506110e26110db846104f38464e8d4a510006113eb565b85906115d4565b935050505b61110f83600101546104f964e8d4a510006104f38688600001546113eb90919063ffffffff16565b9450505050505b92915050565b6002546001600160a01b031681565b60045481565b6000546001600160a01b031690565b60045460009061115490610c0b84866114ab565b9392505050565b60066020908152600092835260408084209091529082529020805460019091015482565b60035481565b816111d7576040805162461bcd60e51b815260206004820152601760248201527f6465706f736974204b494b49206279207374616b696e67000000000000000000604482015290519081900360640190fd5b6000600583815481106111e657fe5b6000918252602080832086845260068252604080852033865290925292206004909102909101915061121784610b1a565b80541561126057600061124c82600101546104f964e8d4a510006104f3876003015487600001546113eb90919063ffffffff16565b9050801561125e5761125e3382611508565b505b821561128c57815461127d906001600160a01b03163330866116d0565b805461128990846115d4565b81555b600382015481546112a79164e8d4a51000916104f3916113eb565b6001820155604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350505050565b6112f16115d0565b6001600160a01b0316611302611131565b6001600160a01b03161461134b576040805162461bcd60e51b81526020600482018190526024820152600080516020611a62833981519152604482015290519081900360640190fd5b6001600160a01b0381166113905760405162461bcd60e51b81526004018080602001828103825260268152602001806119f56026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000826113fa57506000611116565b8282028284828161140757fe5b04146111545760405162461bcd60e51b8152600401808060200182810382526021815260200180611a416021913960400191505060405180910390fd5b600080821161149a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816114a357fe5b049392505050565b600082821115611502576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60025460408051631777090b60e21b81526001600160a01b0385811660048301526024820185905291519190921691635ddc242c91604480830192600092919082900301818387803b15801561155d57600080fd5b505af1158015611571573d6000803e3d6000fd5b505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526115cb908490611726565b505050565b3390565b600082820183811015611154576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600554600060015b828110156116795761166f6005828154811061164e57fe5b906000526020600020906004020160010154836115d490919063ffffffff16565b9150600101611636565b508015610e005761168b816003611444565b90506116a281610eab6005600081548110610e8857fe5b6007819055508060056000815481106116b757fe5b9060005260206000209060040201600101819055505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526107d59085905b606061177b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117d79092919063ffffffff16565b8051909150156115cb5780806020019051602081101561179a57600080fd5b50516115cb5760405162461bcd60e51b815260040180806020018281038252602a815260200180611a82602a913960400191505060405180910390fd5b60606117e684846000856117ee565b949350505050565b60608247101561182f5760405162461bcd60e51b8152600401808060200182810382526026815260200180611a1b6026913960400191505060405180910390fd5b6118388561194a565b611889576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106118c85780518252601f1990920191602091820191016118a9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461192a576040519150601f19603f3d011682016040523d82523d6000602084013e61192f565b606091505b509150915061193f828286611950565b979650505050505050565b3b151590565b6060831561195f575081611154565b82511561196f5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156119b95781810151838201526020016119a1565b50505050905090810190601f1680156119e65780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220bb556de554caf7d79d09f5d36d832c3a38339f4c198bed8e514522c0c4ddd8ee64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1609,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "kiki",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20Mintable)2791"
      },
      {
        "astId": 1611,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "syrup",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(SyrupBar)2776"
      },
      {
        "astId": 1613,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "kikiPerBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1616,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "BONUS_MULTIPLIER",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1619,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(PoolInfo)1607_storage)dyn_storage"
      },
      {
        "astId": 1625,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1598_storage))"
      },
      {
        "astId": 1628,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1630,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "startBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)1607_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)1607_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1045": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Mintable)2791": {
        "encoding": "inplace",
        "label": "contract IERC20Mintable",
        "numberOfBytes": "20"
      },
      "t_contract(SyrupBar)2776": {
        "encoding": "inplace",
        "label": "contract SyrupBar",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)1598_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1598_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1598_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)1598_storage)"
      },
      "t_struct(PoolInfo)1607_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.PoolInfo",
        "members": [
          {
            "astId": 1600,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1045"
          },
          {
            "astId": 1602,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1604,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1606,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "accKiKiPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)1598_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.UserInfo",
        "members": [
          {
            "astId": 1595,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1597,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}